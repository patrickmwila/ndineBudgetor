#!/var/www/html/ndineBudgetor/venv/bin/python3
import sqlite3
from pathlib import Path
import os
import sys
from tabulate import tabulate

# Get the database path
DB_PATH = os.path.expanduser('/var/www/html/ndineBudgetor/instance/ndineBudgetor.db')

def connect_db():
    """Connect to the SQLite database"""
    return sqlite3.connect(DB_PATH)

def list_users():
    """List all users in the database"""
    conn = connect_db()
    cursor = conn.cursor()

    try:
        cursor.execute('SELECT id, username, email FROM "user"')
        users = cursor.fetchall()

        if not users:
            print("\nNo users found in the database.")
            return

        headers = ['ID', 'Username', 'Email']
        print("\nCurrent Users:")
        print(tabulate(users, headers=headers, tablefmt='grid'))

    except sqlite3.Error as e:
        print(f"\nError listing users: {e}")
    finally:
        conn.close()

def delete_user(user_id):
    """Delete a user and all their related data"""
    conn = connect_db()
    cursor = conn.cursor()

    try:
        # First, check if user exists
        cursor.execute('SELECT username FROM "user" WHERE id = ?', (user_id,))
        user = cursor.fetchone()

        if not user:
            print(f"\nNo user found with ID {user_id}")
            return

        username = user[0]

        # Confirm deletion
        confirm = input(f"\nAre you sure you want to delete user '{username}' (ID: {user_id}) and ALL their data? (yes/no): ")
        if confirm.lower() != 'yes':
            print("\nDeletion cancelled.")
            return

        # Start transaction
        conn.execute('BEGIN TRANSACTION')

        # Delete all related data in correct order
        cursor.execute('DELETE FROM "transaction" WHERE user_id = ?', (user_id,))
        cursor.execute('DELETE FROM "budget_item" WHERE budget_id IN (SELECT id FROM "budget" WHERE user_id = ?)', (user_id,))
        cursor.execute('DELETE FROM "budget" WHERE user_id = ?', (user_id,))
        cursor.execute('DELETE FROM "category" WHERE user_id = ?', (user_id,))
        cursor.execute('DELETE FROM "saving" WHERE user_id = ?', (user_id,))
        cursor.execute('DELETE FROM "investment" WHERE user_id = ?', (user_id,))
        cursor.execute('DELETE FROM "user" WHERE id = ?', (user_id,))

        # Commit transaction
        conn.commit()
        print(f"\nSuccessfully deleted user '{username}' and all their data.")

    except sqlite3.Error as e:
        conn.rollback()
        print(f"\nError deleting user: {e}")
    finally:
        conn.close()

def print_help():
    """Print usage instructions"""
    print("\nUser Management Script")
    print("=====================")
    print("\nUsage:")
    print("  python manage_users.py list              - List all users")
    print("  python manage_users.py delete <user_id>  - Delete a user and their data")
    print("  python manage_users.py help              - Show this help message")

def main():
    if not os.path.exists(DB_PATH):
        print(f"\nError: Database not found at {DB_PATH}")
        return

    if len(sys.argv) < 2 or sys.argv[1] == 'help':
        print_help()
        return

    command = sys.argv[1].lower()

    if command == 'list':
        list_users()
    elif command == 'delete' and len(sys.argv) == 3:
        try:
            user_id = int(sys.argv[2])
            delete_user(user_id)
        except ValueError:
            print("\nError: User ID must be a number")
            print_help()
    else:
        print("\nInvalid command or missing arguments")
        print_help()

if __name__ == '__main__':
    main()

